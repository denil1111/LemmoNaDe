/**************************************************************@license
LemmoNaDe

Copyright (C) 2014  Michael Rieppel <mrieppel at gmail dot com>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
************************************************************************/
var dep=[];var cnt=[];var frm=[];var tr=[];var rul=[];var lin=[];var gls=[];function get_userproblem(){var e=document.getElementById("premises").value.replace(/ /g,"");var r=e==""?[]:e.split(",");var n=document.getElementById("conclusion").value.replace(/ /g,"");try{put_problem(r,n)}catch(t){return errmess([1],t)}}function put_problem(e,r){var n=[];try{var t=check_goal(r)}catch(i){clearall();throw"ERROR: conclusion is not well formed."}for(var o=0;o<e.length;o++){try{var l=check_line((o+1).toString(),e[o],parse(e[o]),"Premise","",o);n.push(l)}catch(i){throw"ERROR: one of the premises is not well formed."}}for(var o=0;o<n.length;o++){append_line(n[o].d,n[o].f,n[o].t,n[o].r,n[o].l,n[o].n)}insert_goal(t);errmess([0],"");disp("app")}function get_line(){var e=document.getElementById("dep").value.replace(/ /g,"");var r=document.getElementById("frm").value.replace(/ /g,"");var n=parse(r);var t=document.getElementById("rul").value;var i=document.getElementById("lin").value.replace(/ /g,"");var o=cnt.length;if(t=="SI/TI"){t=document.getElementById("SI1").value}try{var l=check_line(e,r,n,t,i,o)}catch(a){return errmess([1],a)}append_line(l.d,l.f,l.t,l.r,l.l,l.n);errmess([0],"")}function check_line(e,r,n,t,i,o){if(n.length==0){r="("+r+")";n=parse(r)}ckSyn(e,r,n,i);e=sorted(rmDup(mkIntArr(e)));i=mkIntArr(i);ckRest(e,r,n,t,i,o);return{d:e,f:r,t:n,r:t,l:i,n:o}}function append_line(e,r,n,t,i,o){dep.push(e);frm.push(r);tr.push(n);rul.push(t);lin.push(i);cnt.push(o+1);var l=document.getElementById("drvt");var a=mkRow(cnt.length-1);l.appendChild(a);clear_appt()}function delete_previous(){if(cnt.length==0){return errmess([1],"ERROR: no lines to delete.")}else if(rul[rul.length-1]=="Premise"){return errmess([1],"ERROR: no lines to delete. Premise lines cannot be deleted.  Reload the page to start a new proof if you entered the premises incorrectly.")}else{var e=document.getElementById("drvt");e.deleteRow(e.rows.length-1);dep.pop();cnt.pop();frm.pop();tr.pop();rul.pop();lin.pop()}if(cnt.length==0&&gls.length==0){clear_appt();clear_prbt();disp("app")}errmess([0],"")}function get_goal(){var e=document.getElementById("gfrm").value.replace(/ /g,"");try{var r=check_goal(e)}catch(n){return errmess([1],n)}insert_goal(r)}function check_goal(e){var r=parse(e);if(r.length==0){e="("+e+")";r=parse(e);if(r.length==0){throw"ERROR: goal/conclusion formula is not well formed: "+e}}return e}function insert_goal(e){var r=["depc","cntc","frmc","rulc"];var n=document.getElementById("goalt");var t=n.insertRow(0);var i=new Array(4);for(var o=0;o<4;o++){i[o]=document.createElement("td");i[o].className=r[o]}var l=document.createTextNode("Goal:");var a=document.createTextNode(padBC(e));i[0].appendChild(l);i[2].appendChild(a);for(var o=0;o<4;o++){t.appendChild(i[o])}errmess([0],"");document.getElementById("gfrm").value="";gls.push(e)}function delete_goal(){var e=document.getElementById("goalt");if(gls.length==1){return errmess([1],"ERROR: No subgoals to delete.  Cannot delete the main goal (conclusion) of the argument.")}else{e.deleteRow(0);gls.pop()}if(gls.length==0&&cnt.length==0){clear_appt();clear_prbt();disp("app")}errmess([0],"")}function load_line(){var e=parseInt(document.getElementById("rl").value.replace(/ /g,""),10);if(isNaN(e)||e>cnt.length||e<1){return errmess([1],"ERROR: There is no line number "+e+" in the proof.")}e=e-1;if(rul[e]=="Premise"){return errmess([1],"ERROR: premise lines cannot be edited.  Reload the page to start a new proof if you entered the premises incorrectly.  Alternatively, export the proof as its stands, edit the premise, and then import the edited proof.")}document.getElementById("depr").value=dep[e].join(",");document.getElementById("frmr").value=frm[e];if(rul[e].indexOf("SI")==0){document.getElementById("rulr").value="SI/TI";document.getElementById("SI2").style.display="block";document.getElementById("SI2").value=rul[e]}else{document.getElementById("rulr").value=rul[e];document.getElementById("SI2").style.display="none"}document.getElementById("linr").value=lin[e].join(",");errmess([0],"")}function rep_line(){var e=parseInt(document.getElementById("rl").value.replace(/ /g,""),10);var r=document.getElementById("depr").value.replace(/ /g,"");var n=document.getElementById("frmr").value.replace(/ /g,"");var t=parse(n);var i=document.getElementById("rulr").value;var o=document.getElementById("linr").value.replace(/ /g,"");if(e>cnt.length||e<1){errmess([1],"ERROR: No line number "+e.toString()+" to replace")}if(i=="SI/TI"){i=document.getElementById("SI2").value}e-=1;try{var l=check_line(r,n,t,i,o,e)}catch(a){return errmess([1,e+1],"There is a problem with the replacement for line "+(e+1)+" you entered.  The error message concerning it is:<br /><br />"+a)}dep[e]=l.d;frm[e]=l.f;tr[e]=l.t;rul[e]=l.r;lin[e]=l.l;var s=document.getElementById("drvt");var u=mkRow(e);s.removeChild(s.childNodes[e]);s.insertBefore(u,s.childNodes[e]);for(var f=e+1;f<cnt.length;f++){try{ckRest(dep[f],frm[f],tr[f],rul[f],lin[f],f)}catch(a){return errmess([1,f+1],"There is a problem with proof line "+(f+1)+".  The error message concerning it is:<br /><br />"+a)}}errmess([0],"");clear_rept()}function export_proof(){if(cnt.length==0){return errmess([1],"ERROR: no proof to export.")}var e=document.getElementById("plain").checked;var r=document.getElementById("pretty").checked;var n=document.getElementById("latex").checked;var t=dep.map(function(e){return e.join(",")});var i=cnt.map(function(e){return"("+e.toString()+")"});var o=e?frm.map(padBC):"";o=r?frm.map(function(e){return padBC2(richardify(e))}):o;o=n?frm.map(function(e){return latexify(richardify(e))}):o;var l=r||n?rul.map(gRul):rul.slice(0);var a=lin.map(function(e){return e.join(",")});var s=e?padBC(gls[0]):"";s=r?function(e){return padBC2(richardify(e))}(gls[0]):s;s=n?function(e){return latexify(richardify(e))}(gls[0]):s;var u="";var f="";var c=get_premises();if(e||r){u+="Problem: ";for(var d=0;d<c.length;d++){u+=d==c.length-1?o[d]:o[d]+", "}u=u+" ⊢ "+s+"\r\n\r\n";pad(t,max(t));pad(i,max(i));pad(o,max(o)+2);for(var d=0;d<cnt.length;d++){if(a[d].length==0){f+=t[d]+i[d]+o[d]+l[d]+"\r\n"}else{f+=t[d]+i[d]+o[d]+a[d]+"  "+l[d]+"\r\n"}}}if(n){u+="\\noindent Problem: $";for(var d=0;d<c.length;d++){u+=d==c.length-1?o[d]:o[d]+", "}u+=" \\vdash "+s+"$\r\n\r\n";f="\\noindent\\begin{tabular}{ l l l l }\r\n";l=l.map(h);for(var d=0;d<cnt.length;d++){if(a[d].length==0){f+=t[d]+" & "+i[d]+" & $"+o[d]+"$ & "+l[d]+"\\\\\r\n"}else{f+=t[d]+" & "+i[d]+" & $"+o[d]+"$ & "+a[d]+" "+l[d]+"\\\\\r\n"}}f=f+"\\end{tabular}"}document.getElementById("importarea").value=u+f;function h(e){var r="";var n="";for(var t=0;t<e.length;t++){n=utox(e[t]);if(n!=e[t]){n="$"+n+"$"}r+=n}return r}}function import_proof(){var e=document.getElementById("importarea").value;if(e.indexOf("Paste a previously")>=0){return errmess([1],"ERROR: paste a proof into the textarea first.")}clearall();document.getElementById("drvt").innerHTML="";document.getElementById("goalt").innerHTML="";var r=[dep,cnt,frm,tr,rul,lin];var n=b(e);var t=[];var i="";var o="";var l=[];var a="";var s="";var u="";while(n[0].indexOf("Problem: ")!=0&&e.length!=0){e=n[1];n=b(e)}if(e.length==0){return errmess([1],'ERROR: proofs must begin with a problem line.  Something like "Problem: (P>Q), P ⊢ Q"')}try{var f=get_problem(n[0])}catch(c){return errmess([1],c)}insert_goal(f[1]);while(e.length!=0&&(n[0].length==0||n[0][0]!=" "&&!isInt(n[0][0]))){e=n[1];n=b(e)}if(e.length==0){return v()}n=b(e);while(n[0].length!=0){t=n[0].split("  ").filter(m);t=t.map(function(e){return e.replace(/ /g,"")});e=n[1];n=b(e);if(t.length==5){i=t[0];u=parseInt(t[1].substring(1,t[1].length-1),10);o=t[2];a=t[4];l=parse(o);s=t[3]}else if(t.length==4){var o=0;for(var d=0;d<t.length;d++){if(parse(t[d]).length!=0){o=d;break}}if(o==1){i="";u=parseInt(t[0].substring(1,t[0].length-1),10);o=t[1];a=t[3];l=parse(o);s=t[2]}else if(o==2){i=t[0];u=parseInt(t[1].substring(1,t[1].length-1),10);o=t[2];a=t[3];l=parse(o);s=""}else{return v()}}else if(t.length==3){i="";u=parseInt(t[0].substring(1,t[1].length-1),10);o=t[1];l=parse(o);a=t[2];s=""}else{return v()}try{var h=check_line(i,o,l,a,s,u-1)}catch(c){return errmess([1],"ERROR: There is a problem with line "+u+" in the proof you are attempting to import.  The error message concerning it is:<br/><br/>"+c)}if(h.r=="Premise"&&f[0].indexOf(h.f)<0){return errmess([1],"ERROR: Your proof contains the following formula as a premise on line "+(h.n+1)+": "+o+". This is not among the premises in the problem you entered.  Problem is:<br/>"+f[0].join(",")+" ⊢ "+f[1])}append_line(h.d,h.f,h.t,h.r,h.l,h.n);errmess([0],"")}check_proof();document.getElementById("importarea").value='Paste a previously exported proof (in plain notation) here and import it by clicking the button. NOTE: you can edit a proof here, but you need to be careful about formatting.  E.g. make sure the proof begins with a "Problem: " line, that formulas contain outermost parentheses, and that there are at least two spaces separating each "column" of the proof, with no double spaces elsewhere.';function p(e){var r=["∀","∃","→","↔","⊥"];for(var n=0;n<r.length;n++){if(e.indexOf(r[n])>=0){return true}}return false}function m(e){if(e.length==0){return false}hascontent=false;for(var r=0;r<e.length;r++){if(e[r]!=" "){hascontent=true}}return hascontent}function g(){var e=document.getElementById("drvt");for(var r=0;r<cnt.length;r++){e.appendChild(mkRow(r))}}function v(){clearall();document.getElementById("drvt").innerHTML="";document.getElementById("goalt").innerHTML="";errmess([1],"ERROR: Something is wrong with the formatting of the proof you entered.  Remember to include outermost parentheses in formulas.")}function b(e){var r=e.indexOf("\n");if(r!=-1){return[e.substring(0,r),e.substring(r+1)]}else{return[e,""]}}}function check_proof(){if(cnt.length==0){return errmess([1],"ERROR: No proof to check")}for(var e=0;e<cnt.length;e++){try{ckRest(dep[e],frm[e],tr[e],rul[e],lin[e],e)}catch(r){return errmess([1,e+1],"There is a problem with proof line "+(e+1)+".  The error message concerning it is:<br /><br />"+r)}}var n=dep[dep.length-1];for(var e=0;e<n.length;e++){if(rul[n[e]-1]!="Premise"){return errmess([1],"WARNING: the final line of your proof depends on line "+n[e]+", which is not a Premise!")}}if(frm[frm.length-1]!=gls[0]){return errmess([1],"WARNING: the last line of you proof does not match the conclusion you are aiming for.  Last line should be: "+gls[0])}return errmess([0],"Proof checks out!")}function mkRow(e){var r=document.createElement("tr");var n=new Array(4);var t=new Array(4);var i=["depc","cntc","frmc","rulc"];for(var o=0;o<4;o++){n[o]=document.createElement("td");n[o].className=i[o]}t[0]=document.createTextNode(dep[e].join(","));t[1]=document.createTextNode("("+cnt[e]+")");t[2]=document.createTextNode(padBC(frm[e]));t[3]=document.createTextNode(lin[e].join(",")+"  "+rul[e]);for(var o=0;o<4;o++){n[o].appendChild(t[o]);r.appendChild(n[o])}return r}function errmess(e,r){var n=document.getElementById("errord");var t=document.getElementById("drvt");if(e[0]){n.style.border="solid 1px #FF0000";n.style.backgroundColor="#FF9999";n.innerHTML=r;for(var i=0;i<t.childNodes.length;i++){t.childNodes[i].style.color="black"}if(e.length>1){t.childNodes[e[1]-1].style.color="red"}}else{n.style.border="solid 1px #B4BAEA";n.style.backgroundColor="#F0F4FF";n.innerHTML=r;for(var i=0;i<t.childNodes.length;i++){t.childNodes[i].style.color="black"}}}function clear_appt(){document.getElementById("dep").value="";document.getElementById("frm").value="";document.getElementById("rul").value="Assumption";document.getElementById("SI1").value="SI(DS1)";document.getElementById("SI1").style.display="none";document.getElementById("lin").value=""}function clear_prbt(){document.getElementById("premises").value="";document.getElementById("conclusion").value=""}function clear_rept(){document.getElementById("rl").value="";document.getElementById("depr").value="";document.getElementById("frmr").value="";document.getElementById("linr").value="";document.getElementById("rulr").value="Assumption";document.getElementById("SI2").value="SI(DS1)";document.getElementById("SI2").style.display="none"}function clearall(){dep=[];cnt=[];frm=[];tr=[];rul=[];lin=[];gls=[]}function get_premises(){prems=[];for(var e=0;e<cnt.length;e++){if(rul[e]=="Premise"){prems.push(e)}}return prems}function get_problem(e){e=e.replace("Problem: ","");e=e.replace("⊢",",");e=e.replace(/ /g,"");e=e.split(",");e=e.filter(function(e){return e.length!=0});var r="";for(var n=0;n<e.length;n++){if(parse(e[n]).length==0){throw"ERROR: the following formula in the Problem line is ill-formed: "+e[n]+". Make sure outermost parentheses are included."}}return[e.slice(0,e.length-1),e[e.length-1]]}function disp(e){var r=["appm","repm","expm","refm"];var n=["prbt","appt","rept","expt","reft"];var t=cnt.length>0||gls.length>0;for(var i=0;i<r.length;i++){document.getElementById(r[i]).style.backgroundColor="#DDDDDD"}for(var i=0;i<n.length;i++){document.getElementById(n[i]).style.display="none"}var o=e=="app"&&!t?"prbt":e+"t";document.getElementById(o).style.display="block";document.getElementById(e+"m").style.backgroundColor="white"}function showSI(e){var r={rul:"SI1",rulr:"SI2"};var n=document.getElementById(e);var t=document.getElementById(r[e]);if(n.options[n.selectedIndex].value=="SI/TI"){t.style.display="block"}else{t.style.display="none"}}function exp(e){var r=document.getElementById(e);var n=document.getElementById(e+"trigger");var t={sync:"Syntax",srulc:"Rules for Sentential Logic",qrulc:"Rules for Quantificational Logic"};if(r.style.display=="none"||r.style.display==""){r.style.display="block";n.innerHTML="[–] "+t[e]}else{r.style.display="none";n.innerHTML="[+] "+t[e]}}function ckEI(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to line "+o[0]+"]: ";if(o.length!=1){throw a+"The rule is being applied to an inappropriate number of lines."}if(n.length!=2||!isQ(n[0])||n[0][1]!="E"){throw a+"The formula being derived is not existentially quantified."}var s=isInst(n,frm[o[0]-1]);if(s=="_"){throw a+"The formula on line "+o[0]+" is not an instance of the formula being derived."}var u=dep[o[0]-1].join(",");if(e.join(",")!=u){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the line the rule is applied to."}}function ckEE(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to lines "+o.join(",")+"]: ";if(o.length!=3){throw a+"The rule is being applied to an inappropriate number of lines."}var s=o[0]-1;if(tr[s].length!=2||!isQ(tr[s][0])||tr[s][0][1]!="E"){throw a+"The first rule line must be an existentially quantified formula."}var u=o[1]-1;var f=isInst(tr[s],frm[u]);if(rul[u]!="Assumption"||f=="_"){throw a+"The second rule line is either not an assumption, or not an instance of the existential formula on the first rule line."}var c=o[2]-1;if(frm[c]!=r){throw a+"The formula being derived must match the formula on the third rule line."}var d=[];for(var h=0;h<dep[c].length;h++){if(dep[c][h]-1!=u){d=d.concat(freeVars(tr[dep[c][h]-1]))}}d=d.concat(freeVars(tr[c]));d=d.concat(freeVars(tr[s]));if(d.indexOf(f)>=0){throw a+"Generalizability Failure.  The constant '"+f+"' used in creating the instance on line "+(u+1)+" occurs in either (i) the original existential on line "+(s+1)+", or (ii) the formula on line "+(c+1)+" or (iii) one of the dependencies of line "+(c+1)+" (other than "+(u+1)+")."}var p=dep[s].concat(dep[c]);p=rmDup(p);if(p.indexOf(u+1)>=0){p.splice(p.indexOf(u+1),1)}p=sorted(p);if(e.join(",")!=p.join(",")){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the first and third rule lines, an eliminate the the number of the assumption on the second rule line."}}function ckAI(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to line "+o[0]+"]: ";if(o.length!=1){throw a+"The rule is being applied to an inappropriate number of lines."}if(n.length!=2||!isQ(n[0])||n[0][1]!="A"){throw a+"The formula being derived is not universally quantified."}var s=isInst(n,frm[o[0]-1]);if(s=="_"){throw a+"The formula on the line the rule is being applied to is not an instance of the universal being derived."}var u=freeVars(n);if(u.indexOf(s)>=0){throw a+"Every occurrence of the constant '"+s+"' in line "+o[0]+" has to be replaced with the variable '"+n[0][2]+"' bound by the quantifier being introduced."}u=[];for(var f=0;f<dep[o[0]-1].length;f++){u=u.concat(freeVars(tr[dep[o[0]-1][f]-1]))}if(u.indexOf(s)>=0){throw a+"Generalizability Failure.  The constant '"+s+"' being generalized on occurs in one of the dependencies of line "+o[0]+"."}if(e.join(",")!=dep[o[0]-1].join(",")){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the line the rule is being applied to."}}function ckAE(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to line "+o[0]+"]: ";if(o.length!=1){throw a+"The rule is being applied to an inappropriate number of lines."}if(tr[o[0]-1].length!=2||!isQ(tr[o[0]-1][0])||tr[o[0]-1][0][1]!="A"){throw a+"The formula the rule is being applied to is not universally quantified."}var s=isInst(tr[o[0]-1],r);if(s=="_"){throw a+"The formula being derived is not an instance of the universally quantified formula on line "+o[0]+"."}var u=dep[o[0]-1].join(",");if(e.join(",")!=u){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the line the rule is applied to."}}function ckIDI(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+"]: ";if(o.length!=0){throw a+"This rule should not be applied to any lines."}if(n.length!=3||n[1]!="="||n[0]!=n[2]){throw a+"The formula entered is not of the form 't=t'."}if(e.length!=0){throw a+"Lines introduced by =I should have no dependencies."}}function ckIDE(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to lines "+o.join(",")+"]: ";if(o.length!=2){throw a+"The rule is being applied to an inappropriate number of lines."}if(tr[o[0]-1].length!=3||tr[o[0]-1][1]!="="){throw a+"The first rule line needs to be an identity."}if(!checkID(tr[o[0]-1],tr[o[1]-1],r)){throw a+"The formula being derived does not follow by "+t+"."}var s=dep[o[0]-1].concat(dep[o[1]-1]);s=sorted(rmDup(s));if(e.join(",")!=s.join(",")){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the two lines the rule is being applied to."}}function ckQS(e,r,n,t,i,o,l){var a="[ERROR applying SI(QS) to line "+o[0]+"]: ";if(o.length!=1){throw a+"The rule is being applied to an inappropriate number of lines."}var s=o[0]-1;if(n.length!=2||n[1].length!=2||tr[s].length!=2||tr[s][1].length!=2){h()}if(isU(tr[s][0])&&isQ(tr[s][1][0])){var u=unparse(tr[s][1][1]);var f=tr[s][1][0];var c=p(f);var d=c+"~"+u;if(r!=d){h()}}else if(isQ(tr[s][0])&&isU(tr[s][1][0])){var u=unparse(tr[s][1][1]);var f=tr[s][0];var c=p(f);var d="~"+c+u;if(r!=d){h()}}else{h()}if(e.join(",")!=dep[s].join(",")){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the line the rule is being applied to."}function h(){throw a+"The formula being derived does not follow by "+t+"."}function p(e){var r={A:"E",E:"A"};return e[0]+r[e[1]]+e[2]+e[3]}}function ckAV(e,r,n,t,i,o,l){var a="[ERROR applying SI(AV) to line "+o[0]+"]: ";if(o.length!=1){throw a+"The rule is being applied to an inappropriate number of lines."}if(!isAV(tr[o[0]-1],frm[o[0]-1],r)){throw a+"The formula being derived is not a single variable alphabetic variant of the formula on line "+o[0]+"."}if(e.join(",")!=dep[o[0]-1].join(",")){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the line the rule is being applied to."}}function mkTmp(e){var r=e[0][2];return n(e[1]);function n(e){if(e.length==2&&isQ(e[0])){if(e[0][2]==r){return[e[0],e[1]]}else{return[e[0],n(e[1])]}}else if(e.length==2&&isU(e[0])){return[e[0],n(e[1])]}else if(e.length==3&&isB(e[1])){return[n(e[0]),e[1],n(e[2])]}else{return t(r,e)}}function t(e,r){var n=[];for(var t=0;t<r.length;t++){if(r[t]==e){n.push("_")}else{n.push(r[t])}}return n}}function isInst(e,r){var n=mkTmp(e);var t=blockedVars(n);var i=unparse(n);if(i.length!=r.length){return"_"}if(i.indexOf("_")<0){return"_"}var o=r[i.indexOf("_")];if(t.indexOf(o)>=0){return"_"}return r==i.replace(/_/g,o)?o:"_"}function freeVars(e){function r(e,n){if(e.length==2&&isQ(e[0])){n.push(e[0][2]);return r(e[1],n)}else if(e.length==2&&isU(e[0])){return r(e[1],n)}else if(e.length==3&&isB(e[1])){return r(e[0],n).concat(r(e[2],n))}else{var t=[];for(var i=0;i<e.length;i++){if(/[a-z]/.test(e[i])&&n.indexOf(e[i])<0){t.push(e[i])}}return t}}return r(e,[])}function checkID(e,r,n){var t=unparse(r);if(n==t){return false}if(n.length!=t.length){return false}var i=[e[0],e[2]];function o(e,r){if(e.length==2&&isQ(e[0])){r.push(e[0][2]);return e[0]+o(e[1],r)}else if(e.length==2&&isU(e[0])){return e[0]+o(e[1],r)}else if(e.length==3&&isB(e[1])){return"("+o(e[0],r)+e[1]+o(e[2],r)+")"}else{var n="";for(var t=0;t<e.length;t++){if(e[t]==i[0]&&r.indexOf(e[t])==-1){n=n+"_"}else{n=n+e[t]}}return n}}var l=o(r,[]);if(l.indexOf("_")==-1){return false}for(var a=0;a<l.length;a++){if(l[a]=="_"){if(n[a]!=i[0]&&n[a]!=i[1]){return false}}else if(l[a]!=n[a]){return false}}return true}function isAV(e,r,n){if(r.length!=n.length){return false}var t=mkAVList(e);var i="";for(var o=0;o<t.length;o++){i=n[t[o][1].indexOf("_")];if(n==t[o][1].replace(/_/g,i)&&t[o][0].indexOf(i)<0){return true}}return false}function mkAVList(e){var r=getQLoc(e);var n=[];var t="";var i=[];for(var o=0;o<r.length;o++){t=mkAVtmp(getTreeAt(e,r[o]));i=blockedVars(t[1]).concat(freeVars(t[1]));t=insertTmp(e,strAVtmp(t),r[o]);n.push([i,t])}return n}function getQLoc(e){var r=[];n(e,[]);return r;function n(e,t){if(e.length==2&&isQ(e[0])){r.push(t.slice(0));t.push(1);n(e[1],t.slice(0))}else if(e.length==2&&isU(e[0])){t.push(1);n(e[1],t.slice(0))}else if(e.length==3&&isB(e[1])){t.push(0);n(e[0],t.slice(0));t.pop();t.push(2);n(e[2],t.slice(0))}}}function mkAVtmp(e){return[e[0][0]+e[0][1]+"_"+e[0][3],mkTmp(e)]}function strAVtmp(e){return e[0]+unparse(e[1])}function getTreeAt(e,r){for(var n=0;n<r.length;n++){e=e[r[n]]}return e}function blockedVars(e){blocked=[];r(e);return blocked;function r(e){if(e.length==2&&isQ(e[0])){if(n(e[1])){blocked.push(e[0][2])}}else if(e.length==2&&isU(e[0])){r(e[1])}else if(e.length==3&&isB(e[1])){r(e[0]);r(e[2])}}function n(e){test=false;for(var r=0;r<e.length;r++){if(e[r]instanceof Array){test=test||n(e[r])}else{test=test||e[r]=="_"}}return test}}function insertTmp(e,r,n){return t(e,[]);function t(e,o){if(i(o,n)){return r}if(e.length==2&&(isQ(e[0])||isU(e[0]))){return e[0]+t(e[1],o.concat([1]))}if(e.length==3&&isB(e[1])){return"("+t(e[0],o.concat([0]))+e[1]+t(e[2],o.concat([2]))+")"}else{return e.join("")}}function i(e,r){if(e.length!=r.length){return false}for(var n=0;n<e.length;n++){if(e[n]!=r[n]){return false}}return true}}function ckPA(e,r,n,t,i,o,l){if(e.length!=1||e[0]!=l+1){throw"[ERROR using Premise/Assumption rule]: Line must depend on itself (line "+(l+1)+") and nothing else."}if(o.length>0){throw"[ERROR using Premise/Assumption rule]: These rules can't be applied to any lines."}}function ckCJI(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to lines "+o.join(",")+"]: ";if(o.length!=2){throw a+"Rule must be applied to two lines."}if(n.length!=3||n[1]!="&"){throw a+"The formula being derived must be a conjunction."}if(!(r=="("+frm[o[0]-1]+"&"+frm[o[1]-1]+")")&&!(r=="("+frm[o[1]-1]+"&"+frm[o[0]-1]+")")){throw a+"The formulas on lines "+o[0]+" and "+o[1]+" must be the conjuncts of the formula being derived."}var s=sorted(rmDup(dep[o[0]-1].concat(dep[o[1]-1]))).join(",");if(e.join(",")!=s){throw a+"dependencies are wrong. Remember: combine the dependencies of the two lines the rule is applied to."}}function ckCJE(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to line "+o.join(",")+"]: ";if(o.length!=1){throw a+"Rule must be applied to one line."}if(tr[o[0]-1].length!=3||tr[o[0]-1][1]!="&"){throw a+"The formula on line "+o[0]+" must be a conjunction."}if(!(r==unparse(tr[o[0]-1][0]))&&!(r==unparse(tr[o[0]-1][2]))){throw a+"The formula being derived must be one of the conjuncts of the formula on line "+o[0]+"."}var s=dep[o[0]-1].join(",");if(e.join(",")!=s){throw"Using &E. dependencies are wrong. Remember: carry down the dependencies of the line the rule is applied to."}}function ckDJI(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to line "+o.join(",")+"]: ";if(o.length!=1){throw a+"Rule must be applied to one line"}if(n.length!=3||n[1]!="v"){throw a+"The formula being derived must be a disjunction."}if(!(unparse(n[0])==frm[o[0]-1])&&!(unparse(n[2])==frm[o[0]-1])){throw a+"The formula on line "+o[0]+" must be a disjunct of the formula being derived."}var s=dep[o[0]-1].join(",");if(e.join(",")!=s){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the line the rule is applied to."}}function ckDJE(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to lines "+o.join(",")+"]: ";if(o.length!=5){throw a+"Rule must be applied to five lines."}if(tr[o[0]-1][1]!="v"){throw a+"The first rule line must be the original disjunction."}if(rul[o[1]-1]!="Assumption"||rul[o[3]-1]!="Assumption"){throw a+"The second and fourth rule lines must be assumptions."}if(frm[o[1]-1]!=unparse(tr[o[0]-1][0])){throw a+"The second rule line should be the left disjunct of "+frm[o[0]-1]+"."}if(frm[o[3]-1]!=unparse(tr[o[0]-1][2])){throw a+"The fourth rule line should be the right disjunct of "+frm[o[0]-1]+"."}if(frm[o[2]-1]!=r||frm[o[4]-1]!=r){throw a+"The third and fifth rule lines must match the formula being derived."}var s=dep[o[0]-1].slice(0);var u=dep[o[2]-1].slice(0);var f=dep[o[4]-1].slice(0);if(u.indexOf(o[1])>=0){u.splice(u.indexOf(o[1]),1)}if(f.indexOf(o[3])>=0){f.splice(f.indexOf(o[3]),1)}var c=s.concat(u,f);c=rmDup(c);c=sorted(c);if(e.join(",")!=c.join(",")){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the original disjunction and the two conclusion lines, and then remove the line numbers of the two vE assumptions."}}function ckCNI(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to lines "+o.join(",")+"]: ";if(o.length!=2){throw a+"Rule must be applied to two lines."}if(n.length!=3||n[1]!=">"){throw a+"The formula being derived must be a conditional."}if(rul[o[0]-1]!="Assumption"){throw a+"The first rule line must be an assumption."}if(frm[o[0]-1]!=unparse(n[0])){throw a+"The first rule line must be the antecedent of the conditional being derived."}if(frm[o[1]-1]!=unparse(n[2])){throw a+"The second rule line must be the consequent of the conditional being derived."}var s=dep[o[1]-1].slice(0);if(s.indexOf(o[0])>=0){s.splice(s.indexOf(o[0]),1)}if(e.join(",")!=s.join(",")){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the consequent, and remove the line number of the assumed antecedent."}}function ckCNE(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to lines "+o.join(",")+"]: ";if(o.length!=2){throw a+"Rule must be applied to two lines."}if(tr[o[0]-1].length!=3||tr[o[0]-1][1]!=">"){throw a+"The first rule line must be a conditional."}if(frm[o[1]-1]!=unparse(tr[o[0]-1][0])){throw a+"The second rule line must be the antecedent of the conditional on the first rule line."}if(r!=unparse(tr[o[0]-1][2])){throw a+"The formula being derived must be the consequent of the conditional on the first rule line."}var s=dep[o[0]-1].concat(dep[o[1]-1]);var s=sorted(rmDup(s));var u=s.join(",");if(e.join(",")!=u){throw a+"dependencies are wrong.  Remember: combine the dependencies of the two lines the rule is applied to."}}function ckNI(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to lines "+o.join(",")+"]: ";if(o.length!=2){throw a+"Rule must be applied to two lines."}if(rul[o[0]-1]!="Assumption"){throw a+"The first rule line must be an assumption."}if(tr[o[1]-1].length!=1||tr[o[1]-1][0]!="#"){throw a+"The second rule line must be the absurdity (i.e. #)."}if(r!="~"+frm[o[0]-1]){throw a+"The formula being derived must be the negation of the assumption on the first rule line."}var s=dep[o[1]-1].slice(0);if(s.indexOf(o[0])>=0){s.splice(s.indexOf(o[0]),1)}if(e.join(",")!=s.join(",")){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the absurdity, and remove the line number of the assumption."}}function ckNE(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to lines "+o.join(",")+"]: ";if(o.length!=2){throw a+"Rule must be applied to two lines."}if(r!="#"){throw a+"Formula being derived must be the absurdity, #."}if(frm[o[0]-1]!="~"+frm[o[1]-1]&&"~"+frm[o[0]-1]!=frm[o[1]-1]){throw a+"One of lines "+o[0]+" or "+o[1]+" must be the negation of the other."}var s=dep[o[0]-1].concat(dep[o[1]-1]);s=sorted(rmDup(s));var u=s.join(",");if(e.join(",")!=u){throw a+"dependencies are wrong.  Remember: combine the dependencies of the two lines the rule is applied to."}}function ckDN(e,r,n,t,i,o,l){var a="[ERROR applying DN to line "+o.join(",")+"]: ";if(o.length!=1){throw a+"Rule must be applied to one line."}if(!(frm[o[0]-1].length>=3)||frm[o[0]-1].substr(0,2)!="~~"||r!=frm[o[0]-1].substring(2)){throw a+"Formula on line "+o[0]+" must be the double negation of the formula being derived."}var s=dep[o[0]-1].join(",");if(e.join(",")!=s){throw a+"Dependencies are wrong.  Remember: carry down the dependencies of the line the rule is applied to."}}function ckBCI(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to line "+o+"]: ";if(o.length!=2){throw a+"Rule must be applied to two lines."}var s=tr[o[0]-1];var u=tr[o[1]-1];var f=match(parse("(A>B)"),s);var c=match(parse("(B>A)"),u);var d=match(parse("(A<>B)"),n);var h=match(parse("(B<>A)"),n);if(!f[0]||!c[0]||!d[0]){throw a+"The formulas on lines "+o[0]+" and "+o[1]+" must be conditionals, and the formula being derived must be a biconditional."}if(clash(f[1].concat(c[1]))){throw a+"The conditionals on lines "+o[0]+" and "+o[1]+" have to be converses of each other."}if(clash(f[1].concat(d[1]))&&clash(f[1].concat(h[1]))){throw a+"The biconditional being derived doesn't match the conditionals on lines "+o[0]+" and "+o[1]+"."}var p=dep[o[0]-1].concat(dep[o[1]-1]);p=sorted(rmDup(p));var m=p.join(",");if(e.join(",")!=m){throw a+"Dependencies are wrong.  Remember: carry down the dependencies of the lines the rule is applied to."}}function ckBCE(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to line "+o+"]: ";if(o.length!=1){throw a+"Rule must be applied to one line."}var s=tr[o[0]-1];var u=match(parse("(A<>B)"),s);var f=match(parse("(A>B)"),n);var c=match(parse("(B>A)"),n);if(!u[0]||!f[0]||!c[0]){throw"The formula on line "+o[0]+" must be a biconditional, and the formula being derived must be a conditional."}if(clash(u[1].concat(f[1]))&&clash(u[1].concat(c[1]))){throw"The conditional being derived doesn't match the biconditional on line "+o[0]+"."}if(e.join(",")!=dep[o[0]-1].join(",")){throw a+"Dependencies are wrong.  Remember: carry down the dependencies of the line the rule is applied to."}}function ckEFQ(e,r,n,t,i,o,l){var a="[ERROR applying EFQ to line "+o.join(",")+"]: ";if(o.length!=1){throw a+"Rule must be applied to one line."}if(frm[o[0]-1]!="#"){throw a+"Formula on line "+o[0]+" must be the absurdity, '#'."}if(e.join(",")!=dep[o[0]-1].join(",")){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the line the rule is applied to."}}function ckDf(e,r,n,t,i,o,l){var a="[ERROR applying Df to line "+o.join(",")+"]: ";if(o.length!=1){throw a+"Rule must be applied to one line."}var s=tr[o[0]-1];if(n.length!=3||s.length!=3||!(s[1]=="<>"&&n[1]=="&"||s[1]=="&"&&n[1]=="<>")){d()}if(n[1]=="&"){var u=match(parse("(A<>B)"),s);if(!u[0]){d()}var f=match(parse("((A>B)&(B>A))"),n);var c=match(parse("((B>A)&(A>B))"),n);if(!f[0]||!c[0]){d()}if(clash(u[1].concat(f[1]))&&clash(u[1].concat(c[1]))){d()}}if(n[1]=="<>"){var u=match(parse("((A>B)&(B>A))"),s);if(!u[0]){d()}var f=match(parse("(A<>B)"),n);var c=match(parse("(B<>A)"),n);if(!f[0]||!c[0]){d()}if(clash(u[1].concat(f[1]))&&clash(u[1].concat(c[1]))){d()}}function d(){throw a+"The formula being derived does not follow by Df."
}var h=dep[o[0]-1].join(",");if(e.join(",")!=h){throw a+"dependencies are wrong.  Remember: carry down the dependencies of the line the rule is applied to."}}function ckSI(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to line(s) "+o.join(",")+"]: ";if(i.length==0){throw a+"The rule is not recognized."}if(o.length!=i.length-1){throw a+"The rule is being applied to an inappropriate number of lines."}if(i.length==1){var s=match(parse(i[0]),n);if(!s[0]){d()}if(clash(s[1])){d()}if(e.length!=0){throw a+"dependencies are wrong."}}if(i.length==2){var s=match(parse(i[0]),tr[o[0]-1]);if(!s[0]){d()}var u=match(parse(i[1]),n);if(!u[0]){d()}if(clash(s[1].concat(u[1]))){d()}var f=dep[o[0]-1].join(",");if(e.join(",")!=f){throw a+"dependencies are wrong."}}if(i.length==3){var s=match(parse(i[0]),tr[o[0]-1]);if(!s[0]){d()}var u=match(parse(i[1]),tr[o[1]-1]);if(!u[0]){d()}var c=match(parse(i[2]),n);if(!c[0]){d()}if(clash(s[1].concat(u[1],c[1]))){d()}var f=dep[o[0]-1].concat(dep[o[1]-1]);var f=sorted(rmDup(f));if(e.join(",")!=f.join(",")){throw a+"dependencies are wrong."}}function d(){if(["SI(DS1)","SI(DS2)","SI(MT)"].indexOf(t)>=0){throw a+"The formula being derived does not follow by "+t+".  Perhaps check that the two lines the rule is applied to are listed in the right order."}else{throw a+"The formula being derived does not follow by "+t+"."}}}function ckSIbi(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to line "+o[0]+"]: ";if(i.length==0){throw a+"The rule is not recognized."}if(o.length!=1){throw a+"The rule is being applied to an inappropriate number of lines."}var s=match(parse(i[0]),n);if(!s[0]){s=match(parse(i[1]),n);var u=match(parse(i[0]),tr[o[0]-1])}else{var u=match(parse(i[1]),tr[o[0]-1])}if(!s[0]||!u[0]){f()}if(clash(s[1].concat(u[1]))){f()}if(e.join(",")!=dep[o[0]-1].join(",")){throw a+"dependencies are wrong."}function f(){throw a+"The formula being derived does not follow by "+t+"."}}function ckCom(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to line "+o[0]+"]: ";if(o.length!=1){throw a+"The rule is being applied to an inappropriate number of lines."}var s=["&","v","<>"];var u=n[1];var f=tr[o[0]-1][1];if(u==undefined||f==undefined||u!=f){h()}if(s.indexOf(u)<0){throw a+u+" is not a commutative connective."}var c=match(parse("(A"+u+"B)"),n);var d=match(parse("(B"+u+"A)"),tr[o[0]-1]);if(!c[0]||!d[0]||clash(c[1].concat(d[1]))){h()}if(e.join(",")!=dep[o[0]-1].join(",")){throw a+"dependencies are wrong."}function h(){throw a+"The formula being derived does not follow by "+t+"."}}function ckSDN1(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to line "+o[0]+"]: ";if(o.length!=1){throw a+"The rule is being applied to an inappropriate number of lines."}var s=n[1];var u=tr[o[0]-1][1];if(s==undefined||u==undefined||s!=u){h()}var f=["(A"+s+"B)","(~~A"+s+"B)","(A"+s+"~~B)","(~~A"+s+"~~B)"];var c=get_match(f,n);var d=get_match(f,tr[o[0]-1]);if(d.length==0||c.length==0){h()}if(clash(d[1].concat(c[1]))){h()}if(e.join(",")!=dep[o[0]-1].join(",")){throw a+"dependencies are wrong."}function h(){throw a+"The formula being derived does not follow by "+t+"."}}function ckSDN2(e,r,n,t,i,o,l){var a="[ERROR applying "+gRul(t)+" to line "+o[0]+"]: ";if(o.length!=1){throw a+"The rule is being applied to an inappropriate number of lines."}var s=n[1][1];var u=tr[o[0]-1][1][1];if(s==undefined||u==undefined||s!=u||n[0]!="~"||tr[o[0]-1][0]!="~"){h()}var f=["~(A"+s+"B)","~(~~A"+s+"B)","~(A"+s+"~~B)","~(~~A"+s+"~~B)"];var c=get_match(f,n);var d=get_match(f,tr[o[0]-1]);if(d.length==0||c.length==0){h()}if(clash(d[1].concat(c[1]))){h()}if(e.join(",")!=dep[o[0]-1].join(",")){throw a+"dependencies are wrong."}function h(){throw a+"The formula being derived does not follow by "+t+"."}}function get_match(e,r){var n=[];for(var t=0;t<e.length;t++){var i=match(parse(e[t]),r);if(i[0]){n=i}}return n}function match(e,r){var n=["A","B","C"];var t=[];function i(e,r){for(var o=0;o<e.length;o++){if(e[o]instanceof Array&&r[o]instanceof Array){if(!i(e[o],r[o])){return false}}else if(n.indexOf(e[o])>=0){t.push([n[n.indexOf(e[o])],unparse(r)])}else if(e[o]!=r[o]){return false}}return true}var o=i(e,r);if(o){o=!clash(t)}return o?[o,t]:[o,[]]}function clash(e){var r=e[0];e=e.slice(1);if(e.length==0){return false}for(var n=0;n<e.length;n++){if(e[n][0]==r[0]&&e[n][1]!=r[1]){return true}}return clash(e)}function get_seq(e){switch(e){case"SI(DS1)":return"(AvB),~A,B".split(",");case"SI(DS2)":return"(AvB),~B,A".split(",");case"SI(MT)":return"(A>B),~B,~A".split(",");case"SI(PMI1)":return"A,(B>A)".split(",");case"SI(PMI2)":return"~A,(A>B)".split(",");case"SI(DN+)":return"A,~~A".split(",");case"SI(DeM1)":return"~(A&B),(~Av~B)".split(",");case"SI(DeM2)":return"~(AvB),(~A&~B)".split(",");case"SI(DeM3)":return"~(~Av~B),(A&B)".split(",");case"SI(DeM4)":return"~(~A&~B),(AvB)".split(",");case"SI(Imp)":return"(A>B),(~AvB)".split(",");case"SI(NegImp)":return"~(A>B),(A&~B)".split(",");case"SI(Dist1)":return"(A&(BvC)),((A&B)v(A&C))".split(",");case"SI(Dist2)":return"(Av(B&C)),((AvB)&(AvC))".split(",");case"SI(LEM)":return"(Av~A)".split(",");default:return[]}}function ckSyn(e,r,n,t){if(e!=""&&!ckc(e)){throw"ERROR: dependencies are malformed."}if(n.length==0){throw"ERROR: Formula is malformed."}var i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz()~&<>=#";for(var o=0;o<r.length;o++){if(i.indexOf(r[o])<0){throw"ERROR: the formula you entered contains the unrecognized character '"+r[o]+"'.  See the syntax guide under the Reference tab."}}if(!(t=="")&&!ckc(t)){throw"ERROR: Rule lines are malformed"}}function ckRest(e,r,n,t,i,o){var l=0;if((l=oob(i,o))>0){throw"ERROR: Rule line "+l+" is out of bounds. Rules must be applied to preceding lines."}s=get_seq(t);if(t=="Premise"||t=="Assumption"){ckPA(e,r,n,t,s,i,o)}else if(t=="&I"){ckCJI(e,r,n,t,s,i,o)}else if(t=="&E"){ckCJE(e,r,n,t,s,i,o)}else if(t=="vI"){ckDJI(e,r,n,t,s,i,o)}else if(t=="vE"){ckDJE(e,r,n,t,s,i,o)}else if(t==">I"){ckCNI(e,r,n,t,s,i,o)}else if(t==">E"){ckCNE(e,r,n,t,s,i,o)}else if(t=="~I"){ckNI(e,r,n,t,s,i,o)}else if(t=="~E"){ckNE(e,r,n,t,s,i,o)}else if(t=="DN"){ckDN(e,r,n,t,s,i,o)}else if(t=="<>I"){ckBCI(e,r,n,t,s,i,o)}else if(t=="<>E"){ckBCE(e,r,n,t,s,i,o)}else if(t=="Df"){ckDf(e,r,n,t,s,i,o)}else if(t=="EFQ"){ckEFQ(e,r,n,t,s,i,o)}else if(t=="EI"){ckEI(e,r,n,t,s,i,o)}else if(t=="EE"){ckEE(e,r,n,t,s,i,o)}else if(t=="AI"){ckAI(e,r,n,t,s,i,o)}else if(t=="AE"){ckAE(e,r,n,t,s,i,o)}else if(t=="=I"){ckIDI(e,r,n,t,s,i,o)}else if(t=="=E"){ckIDE(e,r,n,t,s,i,o)}else if(t=="SI(Com)"){ckCom(e,r,n,t,s,i,o)}else if(t=="SI(QS)"){ckQS(e,r,n,t,s,i,o)}else if(t=="SI(AV)"){ckAV(e,r,n,t,s,i,o)}else if(t=="SI(SDN1)"){ckSDN1(e,r,n,t,s,i,o)}else if(t=="SI(SDN2)"){ckSDN2(e,r,n,t,s,i,o)}else if(t.indexOf("DeM")>0||t.indexOf("Imp")>0||t.indexOf("Dist")>0){ckSIbi(e,r,n,t,s,i,o)}else if(t.indexOf("SI")==0){ckSI(e,r,n,t,s,i,o)}else{throw"ERROR: The rule "+t+" you entered is not recognized."}}function oob(e,r){for(var n=0;n<e.length;n++){if(e[n]>r){return e[n]}}return 0}function ckc(e){var r=["0","1","2","3","4","5","6","7","8","9"];var n=false;var t="";for(var i=0;i<e.length;i++){t=e[i];if(r.indexOf(t)>=0){n=true}else if(t==","&&n){n=false}else{return false}}return n}function sorted(e){return e.sort(function(e,r){return e-r})}function mkIntArr(e){if(e==""){return[]}else{var r=e.split(",");return r.map(function(e){return parseInt(e,10)})}}function max(e){var r=0;for(var n=0;n<e.length;n++){if(e[n].length>r){r=e[n].length}}return r}function pad(e,r){for(var n=0;n<e.length;n++){while(e[n].length<r){e[n]+=" "}e[n]+="  "}}function isInt(e){var r=["0","1","2","3","4","5","6","7","8","9"];for(var n=0;n<e.length;n++){if(r.indexOf(e[n])<0){return false}}return!(e.length==0)}function rmDup(e){return e.filter(function(r,n){return e.indexOf(r)==n})}function unparse(e){if(e.length==2&&(isQ(e[0])||isU(e[0]))){return e[0]+unparse(e[1])}if(e.length==3&&isB(e[1])){return"("+unparse(e[0])+e[1]+unparse(e[2])+")"}else{return e.join("")}}function parse(e){if(e==""){return[]}var r=[];var n=[];if(isQ(e)){r=parse(e.substring(4));return r.length?[e.substring(0,4),r]:[]}if(isU(e[0])){r=parse(e.substring(1));return r.length?[e[0],r]:[]}if(e[0]=="("&&e[e.length-1]==")"){var t=gSub(e);if(t.indexOf(undefined)>=0||t.indexOf("")>=0){return[]}else{r=parse(t[0]);n=parse(t[2]);if(r.length&&n.length){return[r,t[1],n]}else{return[]}}}else{return isA(e)?e.split(""):[]}}function isA(e){var r="ABCDEFGHIJKLMNOPQRSTUVWXYZ";if(e.length==1&&isAbs(e)){return true}if(e.length==3&&isT(e[0])&&e[1]=="="&&isT(e[2])){return true}if(r.indexOf(e[0])>=0){if(e.length==1){return true}else{for(var n=1;n<e.length;n++){if(!isT(e[n])){return false}}return true}}else{return false}}function isAbs(e){var r=["#"];return r.indexOf(e)>=0}function isQ(e){var r=["E","A"];if(e[0]=="("&&r.indexOf(e[1])>=0&&isV(e[2])&&e[3]==")"){return true}else{return false}}function isU(e){var r=["~"];for(var n=0;n<r.length;n++){if(e.indexOf(r[n])==0){return true}}return false}function gSub(e){var r=[];var n=0;for(var t=0;t<e.length;t++){if(e[t]=="("){r.push("(")}else if(e[t]==")"&&r.length>0){r.pop()}else if(r.length==1&&(n=isB(e.substring(t)))>0){return[e.substring(1,t),e.substring(t,t+n),e.substring(t+n,e.length-1)]}}return[undefined,undefined,undefined]}function isB(e){var r=["&","v",">","<>"];for(var n=0;n<r.length;n++){if(e.indexOf(r[n])==0){return r[n].length}}return 0}function isT(e){return isC(e)||isV(e)}function isV(e){var r="abcdefghijklmnopqrstuwxyz";return r.indexOf(e)>=0}function isC(e){var r="abcdefghijklmnopqrstuwxyz";return r.indexOf(e)>=0}function richardify(e){if(isQ(e)){return"("+ptou(e[1])+e[2]+")"+richardify(e.substring(4,e.length))}else if(isU(e[0])){return ptou(e[0])+richardify(e.substring(1,e.length))}else if(e[0]=="("&&e[e.length-1]==")"){var r=gSub(e);return"("+richardify(r[0])+ptou(r[1])+richardify(r[2])+")"}else if(isAbs(e)){return ptou(e)}else{return e}}function latexify(e){var r="";var n="";for(var t=0;t<e.length;t++){n=utox(e[t]);if(n!=e[t]){n+=" "}r+=n}return r}function gRul(e){var r="";var n="";for(var t=0;t<e.length;t++){if(e[t]=="<"){n=ptou(e[t]+e[t+1]);t++}else if(e[t]=="E"||e[t]=="A"){n=t==0&&e.length==2?ptou(e[t]):e[t]}else{n=ptou(e[t])}r+=n}return r}function ptou(e){switch(e){case"v":return"∨";case"∨":return"v";case">":return"→";case"→":return">";case"<>":return"↔";case"↔":return"<>";case"#":return"⋏";case"⊥":return"#";case"A":return"∀";case"∀":return"A";case"E":return"∃";case"∃":return"E";default:return e}}function utox(e){switch(e){case"~":return"\\sim";case"&":return"\\&";case"∨":return"\\lor";case"→":return"\\rightarrow";case"↔":return"\\leftrightarrow";case"⋏":return"\\curlywedge";case"∀":return"\\forall";case"∃":return"\\exists";default:return e}}function padBC(e){var r="";var n=0;for(var t=0;t<e.length;t++){n=isB(e.substring(t));if(n==1){r=r+" "+e[t]+" "}else if(n==2){r=r+" "+e[t]+e[t+1]+" ";t=t+1}else{r=r+e[t]}}return r}function padBC2(e){var r=["∨","→","↔","&"];var n="";for(var t=0;t<e.length;t++){if(r.indexOf(e[t])>=0){n+=" "+e[t]+" "}else{n+=e[t]}}return n}